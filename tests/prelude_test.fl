# --- FloatLambda Prelude Test Suite ---
# This file tests the standard library functions defined in prelude.fl

# --- Test Harness (reused from core_test.fl) ---

# Helper to compare two lists for equality
let rec list_eq = (λl1. λl2.
  if (and (null? l1) (null? l2)) then 1
  else if (or (null? l1) (null? l2)) then 0
  else if (eq? (car l1) (car l2)) then (list_eq (cdr l1) (cdr l2))
  else 0
) in

# Test function for single float values
let test = (λtest_name. λexpected. λactual.
  let passed = (eq? expected actual) in
  let _ = if passed then (print "PASS ") else (print "FAIL ") in
  let _ = (print test_name) in
  (print "\n")
) in

let test_list = (λtest_name. λexpected. λactual.
  let passed = (list_eq expected actual) in
  let _ = if passed then (print "PASS ") else (print "FAIL ") in
  let _ = (print test_name) in
  (print "\n")
) in

# --- Test Execution ---

let start_msg = (print (cons 80.0 (cons 114.0 (cons 101.0 (cons 108.0 (cons 117.0 (cons 100.0 (cons 101.0 (cons 32.0 (cons 84.0 (cons 101.0 (cons 115.0 (cons 116.0 (cons 115.0 nil)))))))))))))) in # "Prelude Tests"

# --- 1. Function Utilities ---
let t1_1 = (test (cons 49.0 nil) 42.0 (identity 42.0)) in
let t1_2 = (test (cons 50.0 nil) 10.0 ((const 10.0) 99.0)) in
let t1_3 = (test (cons 51.0 nil) 11.0 ((compose (+ 1.0) (* 2.0)) 5.0)) in

# --- 2. Numeric Utilities ---
let t2_1 = (test (cons 52.0 nil) 10.0 (max 5.0 10.0)) in
let t2_2 = (test (cons 53.0 nil) 5.0 (min 5.0 10.0)) in
let t2_3 = (test (cons 54.0 nil) 1.0 ((between 7.0) 5.0 10.0)) in
let t2_4 = (test (cons 55.0 nil) 0.0 ((between 12.0) 5.0 10.0)) in

# --- 3. Logical Operators ---
let t3_1 = (test (cons 56.0 nil) 0.0 (not 1.0)) in
let t3_2 = (test (cons 57.0 nil) 0.0 (and 1.0 0.0)) in
let t3_3 = (test (cons 58.0 nil) 1.0 (or 0.0 1.0)) in

# --- 4. List Utilities ---
let list_a = (cons 1.0 (cons 2.0 nil)) in
let list_b = (cons 3.0 (cons 4.0 nil)) in
let list_ab = (cons 1.0 (cons 2.0 (cons 3.0 (cons 4.0 nil)))) in
let t4_1 = (test (cons 59.0 nil) 1.0 (null? nil)) in
let t4_2 = (test_list (cons 60.0 nil) list_ab (append list_a list_b)) in
let t4_3 = (test (cons 61.0 nil) 4.0 (last list_ab)) in
let t4_4 = (test_list (cons 62.0 nil) (cons 2.0 (cons 1.0 nil)) (reverse list_a)) in
let t4_5 = (test_list (cons 63.0 nil) list_a (take 2 list_ab)) in
let t4_6 = (test_list (cons 64.0 nil) list_b (drop 2 list_ab)) in
let t4_7 = (test (cons 65.0 nil) 1.0 (safe_car list_a)) in
let t4_8 = (test (cons 66.0 nil) nil (safe_car nil)) in
let t4_9 = (test (cons 67.0 nil) 2.0 (list_get list_a 1)) in
let t4_10 = (test (cons 68.0 nil) nil (list_get list_a 5)) in
let t4_11 = (test_list (cons 69.0 nil) (cons 5.0 (cons 6.0 (cons 7.0 nil))) (range 5 7)) in

# --- 5. Higher-Order List Functions ---
let is_even = (λx. (eq? 0 (rem x 2))) in
let num_list = (cons 1 (cons 2 (cons 3 (cons 5 nil)))) in
let t5_1 = (test (cons 70.0 nil) 1.0 (any? is_even num_list)) in
let t5_2 = (test (cons 71.0 nil) 0.0 (all? is_even num_list)) in

# --- 6. String Functions ---
let str_h = (cons 72.0 nil) in
let str_ello = (cons 101.0 (cons 108.0 (cons 108.0 (cons 111.0 nil)))) in
let str_hello = (append str_h str_ello) in
let str_world = (cons 119.0 (cons 111.0 (cons 114.0 (cons 108.0 (cons 100.0 nil))))) in
let str_abc = (cons 97.0 (cons 98.0 (cons 99.0 nil))) in
let str_ABC = (cons 65.0 (cons 66.0 (cons 67.0 nil))) in

let t6_1 = (test (cons 72.0 nil) 1.0 (string_eq str_hello (cons 72.0 (cons 101.0 (cons 108.0 (cons 108.0 (cons 111.0 nil))))))) in
let t6_2 = (test (cons 73.0 nil) 5.0 (string_length str_hello)) in
let t6_3 = (test_list (cons 74.0 nil) str_hello (string_concat str_h str_ello)) in
let t6_4 = (test (cons 75.0 nil) 101.0 (string_get str_hello 1)) in
let t6_5 = (test_list (cons 76.0 nil) str_ello (substring str_hello 1 4)) in
let t6_6 = (test_list (cons 77.0 nil) str_ABC (string_uppercase str_abc)) in
let t6_7 = (test_list (cons 78.0 nil) str_abc (string_lowercase str_ABC)) in
let t6_8 = (test (cons 79.0 nil) 1.0 (string_contains str_hello (cons 108.0 (cons 108.0 nil)))) in
let t6_9 = (test (cons 80.0 nil) 1.0 (string_starts_with str_hello str_h)) in
let t6_10 = (test (cons 81.0 nil) 1.0 (string_ends_with str_hello str_ello)) in
let t6_11 = (test_list (cons 82.0 nil) (cons str_h (cons str_ello nil)) (string_split str_hello 32.0)) in # Split "H ello" on space
let t6_12 = (test_list (cons 83.0 nil) (append str_hello (append (cons 45.0 nil) str_world)) (string_join (cons str_hello (cons str_world nil)) (cons 45.0 nil))) in

# --- 7. Hash Map ---
let key1 = (cons 107.0 (cons 101.0 (cons 121.0 (cons 49.0 nil)))) in # "key1"
let key2 = (cons 107.0 (cons 101.0 (cons 121.0 (cons 50.0 nil)))) in # "key2"
let hmap0 = (hashmap_new 0) in
let hmap1 = (hashmap_insert hmap0 key1 100.0) in
let hmap2 = (hashmap_insert hmap1 key2 200.0) in
let t7_1 = (test (cons 84.0 nil) 100.0 (hashmap_get hmap2 key1)) in
let t7_2 = (test (cons 85.0 nil) 200.0 (hashmap_get hmap2 key2)) in
let t7_3 = (test (cons 86.0 nil) nil (hashmap_get hmap2 (cons 99.0 nil))) in
let t7_4 = (test (cons 87.0 nil) 1.0 (hashmap_contains hmap2 key1)) in
let t7_5 = (test (cons 88.0 nil) 0.0 (hashmap_contains hmap2 (cons 99.0 nil))) in
let t7_6 = (test (cons 89.0 nil) 2.0 (length (hashmap_keys hmap2))) in

# --- 8. Set (Sorted Lists) ---
let set0 = (set_new) in
let set1 = (set_insert set0 10.0) in
let set2 = (set_insert set1 20.0) in
let set3 = (set_insert set2 10.0) in # Should have no effect
let t8_1 = (test_list (cons 90.0 nil) (cons 10.0 (cons 20.0 nil)) set2) in
let t8_2 = (test_list (cons 91.0 nil) set2 set3) in # Test uniqueness
let t8_3 = (test (cons 92.0 nil) 1.0 (set_contains set2 20.0)) in
let t8_4 = (test (cons 93.0 nil) 0.0 (set_contains set2 30.0)) in
let set_b = (set_insert (set_insert set_new 20.0) 30.0) in
let set_union_ab = (set_union set2 set_b) in
let set_intersect_ab = (set_intersection set2 set_b) in
let t8_5 = (test_list (cons 94.0 nil) (cons 10.0 (cons 20.0 (cons 30.0 nil))) set_union_ab) in
let t8_6 = (test_list (cons 95.0 nil) (cons 20.0 nil) set_intersect_ab) in
let t8_7 = (test (cons 96.0 nil) 2.0 (set_size set2)) in

# --- 9. Vector (Dynamic Arrays) ---
let vec0 = (vector_from_list (cons 10.0 (cons 20.0 nil))) in
let vec1 = (vector_push vec0 30.0) in
let vec2 = (vector_set vec1 0 99.0) in
let t9_1 = (test (cons 97.0 nil) 2.0 (vector_size vec0)) in
let t9_2 = (test (cons 98.0 nil) 20.0 (vector_get vec0 1)) in
let t9_3 = (test (cons 99.0 nil) 3.0 (vector_size vec1)) in
let t9_4 = (test (cons 100.0 nil) 30.0 (vector_get vec1 2)) in
let t9_5 = (test (cons 101.0 nil) 99.0 (vector_get vec2 0)) in
let t9_6 = (test (cons 102.0 nil) 20.0 (vector_get vec2 1)) in


# --- Completion Message ---
let done_msg = (print (cons 68.0 (cons 111.0 (cons 110.0 (cons 101.0 nil))))) in # "Done"

# Return success code
1.0
